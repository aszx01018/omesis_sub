#编写于python3.7，使用库numpy,opencv2
# -*- coding: UTF-8 -*-
import numpy as np
import cv2
import time
import shutil
import ctypes

#初始化空ass文件
def initial_ass(ASS_FILENAME,VIDEO_FILENAME):    
    ASS_BASE="""[Script Info]
    ; Script generated by Aegisub 3.2.2
    ; http://www.aegisub.org/
    Title: New subtitles
    ScriptType: v4.00+
    WrapStyle: 0
    PlayResX: 1920
    PlayResY: 1080
    ScaledBorderAndShadow: yes
    YCbCr Matrix: TV.601

    [Aegisub Project Garbage]
    Last Style Storage: Default
    Audio File: %s
    Video File: %s
    Video AR Mode: 4
    Video AR Value: 1.777778
    Video Zoom Percent: 0.375000

    [V4+ Styles]
    Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
    Style: Default,Arial,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,4.5,4.5,2,30,30,23,1
    Style: ray字幕,Microsoft YaHei UI,100,&H005E4EE3,&HFF0000FF,&H00FFFFFF,&H00000000,-1,0,0,0,100,100,0,0,1,6,0,2,10,10,220,1
    Style: rio字幕,Microsoft YaHei UI,100,&H00D98936,&H000000FF,&H00FFFFFF,&H00000000,-1,0,0,0,100,100,0,0,1,6,0,2,10,10,220,1

    [Events]
    Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
    Comment: 2,0:00:00.00,0:00:00.01,ray字幕,,0,0,0,template line keeptags,
    Comment: 1,0:00:00.00,0:00:00.01,ray字幕,,0,0,0,template line keeptags,{\bord9\3c&H5F4EE3&}
    Comment: 2,0:00:00.00,0:00:00.01,ray1通常,,0,0,0,template line keeptags,
    Comment: 1,0:00:00.00,0:00:00.01,ray1通常,,0,0,0,template line keeptags,{\bord7\3c&H5F4EE3&}
    Comment: 2,0:00:00.00,0:00:00.01,rio字幕,,0,0,0,template line keeptags,
    Comment: 1,0:00:00.00,0:00:00.01,rio字幕,,0,0,0,template line keeptags,{\bord9\3c&HD98936&}
    Comment: 2,0:00:00.00,0:00:00.01,rio1通常,,0,0,0,template line keeptags,
    Comment: 1,0:00:00.00,0:00:00.01,rio1通常,,0,0,0,template line keeptags,{\bord7\3c&HD98936&}
    Comment: 2,0:00:00.00,0:00:00.01,双色,,0,0,0,template line keeptags,{\pos($sx,$sy)\clip(!$lleft-20!,!$ltop-20!,!$lright+20!,$lmiddle)}
    Comment: 1,0:00:00.00,0:00:00.01,双色,,0,0,0,template line keeptags,{\pos($sx,$sy)\bord12\3c&H5F4EE3&\clip(!$lleft-20!,!$ltop-20!,!$lright+20!,$lmiddle)}
    Comment: 2,0:00:00.00,0:00:00.01,双色,,0,0,0,template line keeptags,{\pos($sx,$sy)\1c&HD98936&\clip(!$lleft-20!,$lmiddle,!$lright+20!,!$lbottom+20!)}
    Comment: 1,0:00:00.00,0:00:00.01,双色,,0,0,0,template line keeptags,{\pos($sx,$sy)\bord12\3c&HD98936&\1c&HD98936&\clip(!$lleft-20!,$lmiddle,!$lright+20!,!$lbottom+20!)}
    """%(VIDEO_FILENAME,VIDEO_FILENAME)
    with open(ASS_FILENAME,"w",encoding='utf-8') as f:
        f.write(u'\ufeff')
        f.write(ASS_BASE)
    
#向ass中写入时间轴数据。样式为ray字幕和rio字幕
def writetimestamp(ASS_FILENAME,starttimestring,endtimestring,name='ray'):
    with open(ASS_FILENAME,'a',encoding="utf-8") as f:
        f.write("Dialogue: 0,0:%s,0:%s,%s字幕,,0,0,0,,%s说：\n"%(starttimestring,endtimestring,name,name))
 
if __name__ == "__main__": 
    #修改终端标题
    ctypes.windll.kernel32.SetConsoleTitleW("omesis字幕轴自动生成")

    VIDEO_FILENAME = input('请输入视频文件名(含扩展名)：\n')
    ASS_FILENAME = VIDEO_FILENAME[:-4]+'.ass'
    initial_ass(ASS_FILENAME,VIDEO_FILENAME)
        
    #字幕（出现/消失）像素判定数，可根据分辨率确定
    SUB_START_NUM = 5000
    SUB_END_NUM   = 5000

    #计时开始
    PROGRAM_starttime=time.time() 

    #载入视频
    cap = cv2.VideoCapture(VIDEO_FILENAME,cv2.CAP_FFMPEG) #打开视频
    print('成功读取视频')
    FPS = cap.get(cv2.CAP_PROP_FPS)                      #帧率
    TOTAL_FRAMES = cap.get(cv2.CAP_PROP_FRAME_COUNT)          #总帧数
    WIDTH = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
    HEIGHT = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
    frame_count = 0

    #初始化空判定
    previous_RAY = np.zeros(1920*1080)
    previous_RIO = np.zeros(1920*1080)
    previous_RAY_sum = 0
    previous_RIO_sum = 0
    RAY_new = np.zeros(1920*1080)
    RIO_new = np.zeros(1920*1080)
    RAY_dis = np.zeros(1920*1080)
    RIO_dis = np.zeros(1920*1080)

    #待写入
    RAYstarttimelist = []
    RIOstarttimelist = []

    #进度条
    print("----------")

    while(cap.isOpened()):
        ret, img = cap.read()        
        if ret is False:#没有帧了    
            break 
            
        frame_count = frame_count + 1 #成功读帧，帧数+1
        
        #进度条
        if frame_count%60==0:
            print('|',end='',flush=True)
            if frame_count%600==0:
                print('')
            
        #三色空间
        B,G,R=img.transpose(2,0,1).reshape(3,-1)
        
        #通过颜色判断字幕的存在,用opencv显示图像取色        
        #RIO R 52 G 138 B 216
        #RAY R 226 G 76 B 93
        current_RIO = (B>=213)&(R<=55)&(G>=135)&(G<=141)&(R>=49)&(B<=219)
        current_RAY = (R>=221)&(G<=81)&(B<=98)&(B>=88)&(G>=71)&(R<=231)
        current_RAY_sum = np.sum(current_RAY)
        current_RIO_sum = np.sum(current_RIO)
        
        #调试
        #cv2.imshow('omesis',img)

        #判定项
        RAY_new=(current_RAY==True)&(previous_RAY==False)
        RIO_new=(current_RIO==True)&(previous_RIO==False)
        RAY_new_sum=np.sum(RAY_new)
        RIO_new_sum=np.sum(RIO_new)
        RAY_dis_sum=previous_RAY_sum+RAY_new_sum-current_RAY_sum
        RIO_dis_sum=previous_RIO_sum+RIO_new_sum-current_RIO_sum
        
        #判定起始与终止. 先判终止后判开始避免秒瞬间结束
        #RAY结束
        if (RAY_dis_sum>SUB_END_NUM) & (RAY_dis_sum/(previous_RAY_sum+1) > 0.5):        #超过一半消失则判定为结束
            minute=((frame_count-2)/FPS)/60 #结束帧在前一帧
            second=((frame_count-2)/FPS)%60
            for st in RAYstarttimelist:
                writetimestamp(ASS_FILENAME,st,("%02d:%06.3f"%(minute,second+0.01))[0:8],"ray")  #结束时间点向上取整(0.01s)
            RAYstarttimelist=[] #清空列表，待复用
            
        #RIO结束    
        if (RIO_dis_sum>SUB_END_NUM) & (RIO_dis_sum/(previous_RIO_sum+1) > 0.5):
            minute=((frame_count-2)/FPS)/60
            second=((frame_count-2)/FPS)%60
            for st in RIOstarttimelist:
                writetimestamp(ASS_FILENAME,st,("%02d:%06.3f"%(minute,second+0.01))[0:8],"rio")
            RIOstarttimelist=[]
        
        #RAY起始
        if (RAY_new_sum>SUB_START_NUM) & (RAY_new_sum/(current_RAY_sum+1) > 0.5):       #超过一半为新出现则判定为新行
            minute=((frame_count-1)/FPS)/60 #起始帧在本帧
            second=((frame_count-1)/FPS)%60
            RAYstarttimelist.append(("%02d:%06.3f"%(minute,second))[0:8])   #起始时间点向下取整(0.01s)
        
        #RIO起始
        if (RIO_new_sum>SUB_START_NUM) & ((RIO_new_sum)/(current_RIO_sum+1) > 0.5):
            minute=((frame_count-1)/FPS)/60
            second=((frame_count-1)/FPS)%60
            RIOstarttimelist.append(("%02d:%06.3f"%(minute,second))[0:8])    
        
        #处理结束，当前帧 存为 上一帧
        previous_RAY=current_RAY
        previous_RIO=current_RIO
        previous_RAY_sum=current_RAY_sum
        previous_RIO_sum=current_RIO_sum
      
        #调试
        #if cv2.waitKey(1) & 0xFF == ord('q'): 
        #    break
        
        #每600帧（约10秒）显示一次进度
        if frame_count%600 == 0:        
            PROGRAM_currenttime=time.time()
            print('进度：%d%%'%(100*frame_count/TOTAL_FRAMES))
            ctypes.windll.kernel32.SetConsoleTitleW("(%d%%)omesis字幕轴自动生成"%(100*frame_count/TOTAL_FRAMES))
            print("已处理帧数： %d"%frame_count)
            print("已用时间 %d秒"%(PROGRAM_currenttime-PROGRAM_starttime))
            print("每60帧处理用时 %.2f秒"%(60*(PROGRAM_currenttime-PROGRAM_starttime)/frame_count))
            time_left = (TOTAL_FRAMES - frame_count)*(PROGRAM_currenttime-PROGRAM_starttime)/frame_count
            print("预计剩余时间：%d分%d秒"%(time_left/60,time_left%60))
            print("----------") #进度条

    #收尾可能没结束的字幕
    for st in RAYstarttimelist:
        minute=((frame_count-2)/FPS)/60 #结束帧在前一帧
        second=((frame_count-2)/FPS)%60
        for st in RAYstarttimelist:
            writetimestamp(ASS_FILENAME,st,("%02d:%06.3f"%(minute,second+0.01))[0:8],"ray")

    for st in RIOstarttimelist:
        minute=((frame_count-2)/FPS)/60
        second=((frame_count-2)/FPS)%60
        for st in RIOstarttimelist:
            writetimestamp(ASS_FILENAME,st,("%02d:%06.3f"%(minute,second+0.01))[0:8],"rio")

    print("\n处理完成")
    ctypes.windll.kernel32.SetConsoleTitleW("(处理完成)omesis字幕轴自动生成")
    input('按Enter结束。。。')
        
    #释放资源
    cap.release()
    cv2.destroyAllWindows()

